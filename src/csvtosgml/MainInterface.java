/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csvtosgml;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author jeremy.williamson
 */
public class MainInterface extends javax.swing.JFrame {

    //CUSTOM MEMBERS//////
    //Number of Columns in our output table
    final static private int NUMCOLUMNS = 8;

    //file chooser
    final private JFileChooser fileChooser;
    //Parts list
    final private ArrayList<IpbRow> ipbTable;
    //raw data list
    final private ArrayList<String> rawData;

    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
        //initialize file chooser
        fileChooser = new JFileChooser();
        //initialize part list
        ipbTable = new ArrayList<>();
        //initialize data list
        rawData = new ArrayList<>();

    }

    //this may be obsolete
    //reduces number to column number
    /*public int getColumnNumber(int columnReference) {
        while (columnReference > NUMCOLUMNS) {
            columnReference = columnReference - NUMCOLUMNS;
        }
        return columnReference;
    }*/

    public boolean loadIpbTable(ArrayList<String> rawData) {

        int numRows = (rawData.size() - 8) / 8;

        //System.out.println(numRows);
        //for(String data:rawData){
        //    System.out.println(data);
        //}
        //for every row
        //**START at 1 because the first row is a header**
        int rawIndex = 8;
        for (int i = 1; i <= numRows; i++) {
            IpbRow tempRow = new IpbRow();
            for (int j = 1; j <= NUMCOLUMNS; j++) {
                tempRow.setColumnData(rawData.get(rawIndex++), j);
            }//end for
            ipbTable.add(tempRow);
        }//end for       

        return true;
    }

    public void initializeNextRowPlCodes(ArrayList<IpbRow> table) {
        int currentPlCode = 0;
        for (int i = table.size() - 1; i >= 0; i--) {
            table.get(i).setNextRowPlCode(currentPlCode);
            currentPlCode = table.get(i).getPlCode();
        }//end for
    }//end setIpbTablePlCodes()

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGetCSVFile = new javax.swing.JButton();
        buttonPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGetCSVFile.setText("Load CSV File");
        buttonGetCSVFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGetCSVFileActionPerformed(evt);
            }
        });

        buttonPrint.setText("Print SGML file");
        buttonPrint.setEnabled(false);
        buttonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPrint)
                    .addComponent(buttonGetCSVFile))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(buttonGetCSVFile)
                .addGap(64, 64, 64)
                .addComponent(buttonPrint)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonGetCSVFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGetCSVFileActionPerformed
        //our csv file
        File csvFile = null;

        //our file scanner
        Scanner source;

        // open file chooser        
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            csvFile = fileChooser.getSelectedFile();

            System.out.println("Opening: " + csvFile.getName() + ".");
        } else {
            System.out.println("Open command cancelled by user.");
        }

        if (csvFile != null) {

            try {
                //**THIS IS THE HARD PART** PARSING THE FILE INTO THE PARTS LIST

                //initialize scanner
                InputStream inputStream = new FileInputStream(csvFile);

                //this regex delimiter matches a comma outside of paranthesis
                source = new Scanner(inputStream, "UTF-8").useDelimiter(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)");
                System.out.println("Source scanner initialized.");

                String currentData;
                int lastItemPlCode = 0;
                int currentItemPlCode = 0;
                int counter = 1;
                while (source.hasNext()) {

                    //get the data stripped of carriage returns
                    currentData = source.next().replaceAll("(?:\\n|\\r|\")", "");

                    //get everything except the last 3 blank spots
                    if (counter <= 7) {
                        //when we are at the nomenclature
                        if (counter == 4) {
                            //System.out.println(currentData);
                            //System.out.println(IpbRow.computePlCode(currentData));
                            lastItemPlCode = currentItemPlCode;
                            //System.out.println(lastItemPlCode);
                            currentItemPlCode = IpbRow.computePlCode(currentData);
                        }
                        rawData.add(currentData);

                    } else if (counter == 8) {//when we get to the 8th, inject our own data into the raw data about last item's plCode
                        rawData.add(String.valueOf(lastItemPlCode));
                    } else if (counter == 11) {
                        counter = 0;
                    }
                    counter++;

                }//end while

            }//end try
            catch (FileNotFoundException ex) {
                Logger.getLogger(MainInterface.class
                        .getName()).log(Level.SEVERE, null, ex);
            }//end catch

        }//end if

        //load the raw data into the ipb row list
        if (loadIpbTable(rawData)) {
            buttonPrint.setEnabled(true);
        }

        //setup the next row PlCodes
        initializeNextRowPlCodes(ipbTable);

    }//GEN-LAST:event_buttonGetCSVFileActionPerformed

    private void buttonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintActionPerformed

        //our csv file
        File sgmlFile = null;

        int returnVal = fileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            sgmlFile = fileChooser.getSelectedFile();

            System.out.println("Saving: " + sgmlFile.getName() + ".");
        } else {
            System.out.println("Save command cancelled by user.");
        }

        if (sgmlFile != null) {
            try {
                //FileWriter fileWriter = new FileWriter(sgmlFile);
                try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(sgmlFile), "UTF-8"));) {
                    writer.append("<pl>\r\n");
                    writer.append("<plgrp>\r\n");
                    writer.append("<figure>\r\n");
                    //this is the title of the IPB
                    writer.append("<title>Pressure Door</title>\r\n");
                    writer.append("<graphic boardno=\"IPB001\" reprowid=\"42.\" reprodep=\"51.\"></figure>\r\n");
                    writer.append("<pl0tbl>\r\n");
                    writer.append("<pl0>\r\n");
                    writer.append("<figindex>FIGURE & INDEX/SHEET NO.</figindex>\r\n");
                    writer.append("<partno>PART NUMBER</partno>\r\n");
                    writer.append("<cagecodes>\n");
                    writer.append("<cage>CAGE</cage>\r\n");
                    writer.append("</cagecodes>\r\n");
                    writer.append("<desc>\r\n");
                    //this is the complete assembly nomenclature
                    writer.append("<nomen>DESCRIPTION 1234567</nomen>\r\n");
                    writer.append("</desc>\r\n");
                    writer.append("<units>UNITS PER ASSY</units>\r\n");
                    writer.append("<useoncode>USABLE ON CODE</useoncode>\r\n");
                    writer.append("<smrcodes>\r\n");
                    writer.append("<smrcode>SMR CODE</smrcode>\r\n");
                    writer.append("</smrcodes>\r\n");
                    writer.append("</pl0>\r\n");

                    //for each row item
                    for (IpbRow currentRow : ipbTable) {

                        writer.append("<pl" + currentRow.getPlCode() + ">\r\n");
                        writer.append("<figindex>" + currentRow.getFigureAndIndex() + "</figindex>\r\n");
                        writer.append("<partno>" + currentRow.getPartNumber() + "</partno>\r\n");
                        writer.append("<cagecodes>\r\n");
                        writer.append("<cage>" + currentRow.getCageCode() + "</cage>\r\n");
                        writer.append("</cagecodes>\r\n");
                        writer.append("<desc>\r\n");
                        writer.append("<nomen>" + currentRow.getNomenclature() + "</nomen>\r\n");
                        writer.append("</desc>\r\n");
                        writer.append("<units>" + currentRow.getUnitsEach() + "</units>\r\n");
                        writer.append("<useoncode>" + currentRow.getUsableOnCode() + "</useoncode>\r\n");
                        writer.append("<smrcodes>\r\n");
                        writer.append("<smrcode>" + currentRow.getSmrCode() + "</smrcode>\r\n");
                        writer.append("</smrcodes>\r\n");
                        //is next row's plCode less than this plCode?
                        if (currentRow.getNextRowPlCode() < currentRow.getPlCode()) {
                            //make our printed code the same as current code, so we close that out first
                            int printedCode = currentRow.getPlCode();
                            //print until we close out the same level as the next level
                            while (printedCode >= currentRow.getNextRowPlCode()) {
                                writer.append("</pl" + printedCode-- + ">\r\n");
                            }//end while
                        //is next row's plCode equal to this row's plCode?
                        } else if (currentRow.getNextRowPlCode() == currentRow.getPlCode()) {
                            writer.append("</pl" + currentRow.getPlCode() + ">\r\n");
                        }//end if/else if/esle if
                    }//end foreach

                    //writer.append("</pl0>\r\n");
                    writer.append("</pl0tbl>\r\n");
                    writer.append("<pl0tblfoot></plgrp>\r\n");
                    writer.append("</pl>\r\n");
                }//end try

            } catch (IOException ex) {
                Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_buttonPrintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });

        //nomenclature test
        /*
         IpbRow testPart = new IpbRow(". . . WALK, Safety, Ramp Toe, ..........\n" +
         "Pressure Door (Used on 4F54082-\n" +
         "163F and -164F)");
        
         testPart.initializePlCode();
         System.out.println(testPart.getPlCode());
         */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonGetCSVFile;
    private javax.swing.JButton buttonPrint;
    // End of variables declaration//GEN-END:variables
}
